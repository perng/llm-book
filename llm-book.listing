def adam_update(params, m, v, grads, t,
                learning_rate=0.001, beta1=0.9, beta2=0.999):
    epsilon = 1e-8

    # Update biased first moment estimate
    m = beta1 * m + (1 - beta1) * grads
    # Update biased second moment estimate
    v = beta2 * v + (1 - beta2) * grads**2

    # Bias correction
    m_hat = m / (1 - beta1**t)
    v_hat = v / (1 - beta2**t)

    # Update parameters
    params = params - learning_rate * m_hat / (np.sqrt(v_hat) + epsilon)
    return params, m, v

# Example usage
weights = np.array([0.5, -0.2, 0.1])
m = np.zeros_like(weights)
v = np.zeros_like(weights)
gradients = np.array([0.1, -0.05, 0.02])
t = 1  # timestep
weights, m, v = adam_update(weights, m, v, gradients, t)
